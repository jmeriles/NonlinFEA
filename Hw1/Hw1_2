#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 28 12:07:26 2022

@author: juanmeriles
"""

import numpy as np
import time 


def cube(x):
    if 0<=x: return x**(1./3.)
    return -(-x)**(1./3.)

t0 = time.time()
#Iterative formula
eps = np.finfo(float).eps
#F = np.array([[1,0,0],[0,2,0],[0,0,3]])
F = np.array([[1,2,0],[0,1,0],[0,0,1]])
#F = np.array([[2,1,0],[2,3,-1],[-1,2,2]])
U1 = np.eye(3)

C = F.T@F
error = 1

# part a

while error > 100*eps:
    Ulast = U1
    U1 = 1/2*(U1+C@np.linalg.inv(U1))
    error = (abs(U1-Ulast)).max()
t1 = time.time()    
    

#part b closed form
IC = np.trace(C)
IIC = 1/2 *((np.trace(C)**2)-np.trace(C.T@C))
IIIC = np.linalg.det(C)
e = ((2**5)/27)*(2*(IC**3)-9*IC*IIC+27*IIIC)
n = ((2**10)/27)*(4*(IIC**3)-(IC**2)*(IIC**2)+4*(IC**3)*(IIIC)-18*(IC*IIC*IIIC)+27*(IIIC**2))
if n<0:
    n = -n
sq = -(2/3)*IC+cube(e+np.sqrt(n))+cube(e-np.sqrt(n))
if sq != -2*IC:
    I = 1/2*(np.sqrt(2*IC+sq)+np.sqrt(2*IC-sq+(16*np.sqrt(IIIC)/(np.sqrt(2*IC+sq)))))
else:
    I = np.sqrt(IC+2*np.sqrt(IIC))
II = np.sqrt(IIC+2*np.sqrt(IIIC)*I)
III = np.sqrt(IIIC)
U2 = np.linalg.inv(C+II*np.eye(3))@(I*C+III*np.eye(3))   

t2 = time.time()   
#part c eigenvalue

[lam2,M] = np.linalg.eig(C)
lam = np.sqrt(lam2)

U3 = lam[0]*np.outer(M[:,0],M[:,0])+lam[1]*np.outer(M[:,1],M[:,1])+lam[2]*np.outer(M[:,2],M[:,2])

t3 = time.time()   

T = [t1-t0,t2-t1,t3-t2]

print(U1)
print('')
print(U2)
print('')
print(U3)
print('')
print(T)




           